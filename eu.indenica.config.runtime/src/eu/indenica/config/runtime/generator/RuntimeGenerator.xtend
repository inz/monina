/*
 * generated by Xtext
 */
package eu.indenica.config.runtime.generator

import com.google.inject.Inject
import eu.indenica.config.runtime.generator.extensions.ClientCodeGenerator
import eu.indenica.config.runtime.generator.extensions.CodeElementGenerator
import eu.indenica.config.runtime.generator.extensions.MavenElementGenerator
import eu.indenica.config.runtime.generator.extensions.ScaCompositeGenerator
import eu.indenica.config.runtime.runtime.CodeElement
import eu.indenica.config.runtime.runtime.Component
import java.util.logging.Logger
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.naming.IQualifiedNameProvider

class RuntimeGenerator implements IGenerator {
	private static Logger LOG = Logger::getLogger(typeof(RuntimeGenerator).canonicalName)
	
	@Inject extension IQualifiedNameProvider
	@Inject extension CodeElementGenerator
	@Inject extension ClientCodeGenerator
	@Inject extension ScaCompositeGenerator
	@Inject extension MavenElementGenerator
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val srcPrefix = "src/main/"
		val javaPrefix = srcPrefix + "java/"
		val resourcePrefix = srcPrefix + "resources/"
		// Generate Java artifacts
		for(e : resource.allContents.toIterable.filter(typeof(CodeElement))) {
			LOG.info("Generating class for " + e.fullyQualifiedName)
			fsa.generateFile( 
				javaPrefix + e.fullyQualifiedName.toString("/") + ".java",
				e.compile
			)
		}
		
		for(e : resource.allContents.toIterable.filter(typeof(Component))) {
			LOG.info("Generating files for " + e.fullyQualifiedName)
			fsa.generateFile(
				javaPrefix +
				e.fullyQualifiedName.toString("/") + "ActionEvent.java",
				e.compileActionEvent
			)

			if(e.generateClient) {
				LOG.info("Generating client for " + e.name)
				fsa.generateFile(
					"clients/" + e.name + "/" + e.name + "EventEmitter.java",
					e.compileClientEmitter
				)				
				fsa.generateFile(
					"clients/" + e.name + "/" + e.name + "ActionReceiver.java",
					e.compileActionReceiver
				)
				fsa.generateFile(
					"clients/" + e.name + "/" + e.name + "client.composite",
					e.compileClientComposite
				)
			}
		}
		
		// TODO: Generate client composite and Launcher.
		
		
		// Generate infrastructure composite
		LOG.info("Generating runtime composite...")
		fsa.generateFile(
			resourcePrefix + "runtime.composite", 
			resource.compileRuntimeComposite
		)
		
//		fsa.generateFile(
//			javaPrefix + "eu/indenica/runtime/Launcher.java",
//			compileLauncher
//		)
		
		// Generate launcher pom.xml
		LOG.info("Generating launcher pom.xml...")
		fsa.generateFile(
			"pom.xml",
			compilePom
		)
	}
	

	 
//	def compile(CompositeElement it) '''
//		«compositeHeader(name)»
//			<component name="«name.toFirstUpper»">
//				«body»
//			</component>
//		</composite>
//	'''
//
//	def dispatch body(MonitoringQuery it) '''
//		<implementation.java class="eu.indenica.monitoring.MonitoringQueryImpl" />
//		<property name="statement">
//			«new EsperMonitoringQueryConverter().convert(it)»
//		</property>
//	'''
//	
//	def dispatch body(AdaptationRule it) '''
//		<implementation.java class="eu.indenica.monitoring.AdaptationRuleImpl" />
//		<propery name="statement">
//			«it»
//		</property>
//	'''
	
//	def dispatch name(IndenicaMonitoringQuery it) { name }
//	def dispatch name(EsperMonitoringQuery it) { name }
//	def dispatch name(AdaptationRule it) { name }
//	def dispatch name(Fact it) { name }
}
