//grammar eu.indenica.config.runtime.Runtime with org.eclipse.xtext.common.Terminals
grammar eu.indenica.config.runtime.Runtime with org.eclipse.xtext.xbase.Xbase


generate runtime "http://www.indenica.eu/config/runtime/Runtime"

import "http://www.uni_hildesheim.de/sse/Ivml" as ivml
 
RuntimeModel:
  importSection=XImportSection?
  elements+=AbstractElement*
;
 
AbstractElement:
  // Import | 
  Event | Action | Component | MonitoringQuery |
  Fact | Host | AdaptationRule | PackageDeclaration
;

PackageDeclaration:
	'package' name=QualifiedName '{'
		elements+=AbstractElement*
	'}'
;

//Import:
//	//'import' importedNamespace=QualifiedNameWithWildcard
//  importSection=XImportSection
//;

Component:
	'component' name=ID '{'
		metadata=ComponentMetadata
		(elements+=ComponentElement)*
//		(
//			actions+=ActionRef |
//			emits+=EventRef
//		)*
		hostRef=HostRef?
		endpoints+=Endpoint*
		generateClient?='generate client'?
	'}'
;

ComponentElement:
	EventRef | ActionRef
;

CodeElement:
	Event | Action | Component | Fact
;

//CompositeElement:
//	MonitoringQuery | /* Fact | */ AdaptationRule
//;


ComponentMetadata:
	{ComponentMetadata} (
		('vendor' vendor=STRING)? // &
		('version' version=STRING)?
	)
;

Event:
	'event' name=ID '{'
		(attributes+=EventAttribute)*
	'}'
;

EventRef:
	'event' event=[Event | QualifiedName] 
	frequency=EmissionFrequency?
;

EmissionFrequency:
	'every' (interval=Number unit=TimeUnit) | (frequency=Number 'Hz')
;


Action:
	'action' name=ID '{'
		(parameters+=EventAttribute)*
	'}'
;

ActionRef:
	'action' action=[Action|QualifiedName]
;

EventAttribute:
	name=ID ':' type=JvmTypeReference
;

Host:
	'host' name=ID '{'
		address=HostAddress?
		port=HostPort?
		capacity=HostCapacity?
	'}'
;

HostRef:
	'host' host=[Host | QualifiedName]
;

HostAddress:
	'address' value=STRING
//	fqdn=Fqdn | ipv4=IPV4_ADDRESS | ipv6=IPV6_ADDRESS
;

HostPort:
	'port' port=INT
;

//Fqdn:
//	QualifiedName
//;

//terminal IPV4_ADDRESS:
//	INT '.' INT '.' INT '.' INT
//;

/*
 * IPv6 Address specification from http://www.ietf.org/rfc/rfc2373.txt,
 * Appendix B: 
 *
	  IPv6address=hexpart [ ":" IPv4address ]
	  IPv4address=1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT
	
	  IPv6prefix =hexpart "/" 1*2DIGIT
	
	  hexpart=hexseq | hexseq "::" [ hexseq ] | "::" [ hexseq ]
	  hexseq =hex4 *( ":" hex4)
	  hex4   =1*4HEXDIG
 */
//terminal IPV6_ADDRESS:
//	HEXPART (':' IPV4_ADDRESS)?
//;
//
//terminal HEXPART:
//	HEXSEQ | HEXSEQ '::' HEXSEQ? | '::' HEXSEQ?
//;
//
//terminal HEXSEQ:
//	HEX4 (':' HEX4)*
//;
//
//terminal HEX4:
//	HEXDIGIT (HEXDIGIT (HEXDIGIT (HEXDIGIT)?)?)?
//;
//
//terminal HEXDIGIT:
//	'0' .. '9' |
//	'A' .. 'F' |
//	'a' .. 'f'
//;

HostCapacity:
	'capacity' capacity=INT
;

Endpoint:
	'endpoint' name=ID? '{'
		'at' address=EndpointAddress
		(elements+=ComponentElement)*
	'}'
;

EndpointAddress:
	uri=STRING
	('on' hostRef=HostRef)?
	('port' port=INT)?
	('using' protocol=STRING)?
	('with' params=STRING)?
;


MonitoringQuery:
	IndenicaMonitoringQuery | EsperMonitoringQuery
;
 
IndenicaMonitoringQuery:
  'query' name=ID '{'
  	(
		sources+=EventSourceDeclaration |
		emits+=EventEmissionDeclaration
	)*
  	window=WindowDeclaration?
	condition=MonitoringConditionDeclaration?
	cost=Cost?
	ratio=IoRatio?
  '}'
;

EsperMonitoringQuery:
	'equery' name=ID '{'
		(sources+=EventSourceDeclaration)+
		statement=STRING
	'}'
;

EventMetaRef:
	EventRef | EventEmissionDeclaration
;

EventEmissionDeclaration:
	'emit' event=[Event | QualifiedName] '('
		attributes+=AttributeEmissionDeclaration 
		(',' attributes+=AttributeEmissionDeclaration)*
	')'
;

AttributeEmissionDeclaration:
	expr=ConditionalExpression ('as' attribute=[EventAttribute | QualifiedName])?
;

EventSourceDeclaration:
	'from' sources+=EventSource (',' sources+=EventSource)* 
;

EventSource:
	(('source' | 'sources') sources+=[EventSourceType | QualifiedName] 
		(',' sources+=[EventSourceType | QualifiedName])*)?
	('event' | 'events') events+=[Event | QualifiedName] 
		(',' events+=[Event | QualifiedName])*
	('as' sourceName=ID)? 
;

EventSourceType:
	Component | MonitoringQuery
;

Cost:
	'cost' cost=Number
;

IoRatio:
	'ratio' ratio=Number
;

// FIXME: make proper window declaration!
WindowDeclaration:
	'window' expression=WindowExpression
;

WindowExpression:
	BatchWindow | TimeWindow
;

BatchWindow:
	value=INT ('event' | 'events')?
;

TimeWindow:
	value=INT unit=TimeUnit
;

enum TimeUnit:
	SECONDS='s' | SECONDS='sec' | SECONDS='second' | SECONDS='seconds' |
	MINUTES='m' | MINUTES='min' | MINUTES='minute' | MINUTES='minutes' |
	HOURS='h' | HOURS='hour' | HOURS='hours' |
	DAYS='d' | DAYS='day' | DAYS='days' |
	MONTHS='M' | MONTHS='month' | MONTHS='months' |
	YEARS='y' | YEARS='year' | YEARS='years'
;

MonitoringConditionDeclaration:
	'where' expression=ConditionalExpression
;

Fact:
	'fact' name=ID? '{'
		source=EventSourceDeclaration // &
		partitionKey=PartitionKey?
	'}'
;

PartitionKey:
	'by' key=[EventAttribute | QualifiedName]
;


AttributeAssignment:
	'set' name=ID value=ConditionalExpression
;

AdaptationRule:
	IndenicaAdaptationRule | DroolsAdaptationRule
;

IndenicaAdaptationRule:
	'rule' name=ID '{'
		sources+=AdaptationRuleSource+
		stmts+=AdaptationStatement+
		cost=Cost?
	'}'
;

DroolsAdaptationRule:
	'drule' name=ID '{'
		sources+=AdaptationRuleSource+
		statement=STRING
	'}'
;

AdaptationRuleSource:
	'from' fact=[Fact | QualifiedName] ('as' name=ID)?
;


AdaptationStatement:
	'when' conditon=ConditionalExpression 'then' action=ActionExpression
;

ActionExpression:
	component=[Component | QualifiedName] action=[Action | QualifiedName] 
	('(' attributes+=AttributeEmissionDeclaration ')')?
;



/* Expression syntax adapted from 
 * http://openjdk.java.net/projects/compiler-grammar/antlrworks/Java.g
 * and the Xbase XExpression 	
 */
ConditionalExpression:
	ConditionalOrExpression
;

ConditionalOrExpression returns ConditionalExpression:
	ConditionalAndExpression (=>({BinaryExpression.leftOperand=current} 
		operator=OrOperator) rightOperand=ConditionalAndExpression
	)*
;

OrOperator:
	{OrOperator} operator=('||' | 'or' | 'OR')
;

ConditionalAndExpression returns ConditionalExpression:
	EqualityExpression (=>({BinaryExpression.leftOperand=current} 
		operator=AndOperator) rightOperand=EqualityExpression)*
;

AndOperator:
	{AndOperator} operator=('&&' | 'and' | 'AND')
;

EqualityExpression returns ConditionalExpression:
	RelationalExpression (=>({BinaryExpression.leftOperand=current}
		operator=EqualityOperator) rightOperand=RelationalExpression
	)*
;

EqualityOperator:
	{EqualityOperator} operator=('=' | '!=')
;

RelationalExpression returns ConditionalExpression:
	AdditiveExpression (=>({BinaryExpression.leftOperand=current}
		operator=CompareOperator) rightOperand=AdditiveExpression
	)*
;

CompareOperator:
	{CompareOperator} operator=('<' | '<=' | '>=' | '>')
;

AdditiveExpression returns ConditionalExpression:
	MultiplicativeExpression (=>({BinaryExpression.leftOperand=current}
		operator=AdditiveOperator) 
		rightOperand=MultiplicativeExpression
	)*
;

AdditiveOperator:
	{AdditiveOperator} operator=('+' | '-')
;

MultiplicativeExpression returns ConditionalExpression:
	UnaryExpression (=>({BinaryExpression.leftOperand=current}
		operator=MultiplicativeOperator)
		rightOperand=UnaryExpression
	)*
;

MultiplicativeOperator:
	{MultiplicativeOperator} operator=('*' | '/' | '%')
;

UnaryExpression returns ConditionalExpression:
	{UnaryExpression} operator=UnaryOperator 
		operand=PrimaryExpression 
	| PrimaryExpression
;

UnaryOperator returns Operator:
	{UnaryOperator} operator=('-' | 'not' | '!')
;

Operator returns Operator:
	AndOperator | OrOperator | CompareOperator | AdditiveOperator |
	MultiplicativeOperator
;

PrimaryExpression returns ConditionalExpression:
	ParenthesizedExpression |
	Literal |
	FeatureCall
;

ParenthesizedExpression returns ConditionalExpression:
	'(' ConditionalExpression ')'
;

FeatureCall:
	{FeatureCall} attribute=[EventAttribute | QualifiedName]
;

Literal returns ConditionalExpression:
	BooleanLiteral |
	NumberLiteral |
	NullLiteral |
	StringLiteral |
	IvmlLiteral
;

BooleanLiteral returns ConditionalExpression:
	{BooleanLiteral} ('false' | isTrue?='true')
;

NumberLiteral returns ConditionalExpression:
	{NumberLiteral} value=Number
;


NullLiteral returns ConditionalExpression:
	{NullLiteral} 'null'
;


StringLiteral returns ConditionalExpression:
	{StringLiteral} value=STRING
;

IvmlLiteral returns ConditionalExpression:
	{IvmlLiteral} 'ivml' ref=IvmlVariableReference
;

IvmlVariableReference:
	{IvmlVariableReference} ref=[ivml::VariableDeclarationPart | IvmlQualifiedName]
;

//IvmlExprListReference:
//	{IvmlExprListReference} ref=[ivml::ExpressionListEntry | IvmlQualifiedName]
//;

IvmlQualifiedName:
	ValidID ('::' ValidID)* (=>'.' ValidID)*
;

//QualifiedName:
//  ValidID ('.' ValidID)*
//;
//
//QualifiedNameWithWildcard:
//	QualifiedName (=>'.*')?	
//;

Number hidden():
	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;

ValidID:
	ID
;