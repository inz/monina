//grammar eu.indenica.config.runtime.Runtime with org.eclipse.xtext.common.Terminals
grammar eu.indenica.config.runtime.Runtime with org.eclipse.xtext.xbase.Xbase


generate runtime "http://www.indenica.eu/config/runtime/Runtime"
 
RuntimeModel:
 (elements += AbstractElement)*
;
 
AbstractElement:
  Import | Event | Action | System | MonitoringRule | FactRule // | AdaptationRule
;

Import:
	'import' importedNamespace = QualifiedNameWithWildcard
;

System:
	SystemLabel name = QualifiedName '{'
		metadata = SystemMetadata
		(elements += SystemElement)*
	'}'
;

SystemElement:
  EventRef | ActionRef
;

SystemMetadata:
	{SystemMetadata} (('vendor' vendor = STRING)? &
	('version' version = STRING)?)
;

Event:
	EventLabel name = ID '{'
		(attributes += EventAttribute)*
	'}'
;

EventRef:
	EventLabel name = [Event | QualifiedName]
;

Action:
	ActionLabel name = ID '{'
		(parameters += EventAttribute)*
	'}'
;

ActionRef:
	ActionLabel name = [Action | QualifiedName]
;

EventAttribute:
	name = ID ':' type = QualifiedName
;
 
MonitoringRule:
  MonitoringRuleLabel name = ID '{'
	(
		sources += EventSourceDeclaration |
		emits += EventEmissionDeclaration
	)*
  	window = WindowDeclaration?
	condition = MonitoringConditionDeclaration? 
  '}'
;

EventEmissionDeclaration:
	EmitLabel event = [Event | QualifiedName] '('
		attributes += AttributeEmissionDeclaration 
		(',' attributes += AttributeEmissionDeclaration)*
	')'
;

AttributeEmissionDeclaration:
	expr = ID (AsLabel attribute = [EventAttribute | QualifiedName])?
;

EventSourceDeclaration:
	FromLabel sources += EventSource (',' sources += EventSource)* 
;

EventSource:
	SourceLabel systems += [EventSourceType | QualifiedName] 
		(',' systems += [EventSourceType | QualifiedName])*
	EventLabel events += [Event | QualifiedName] 
		(',' events += [Event | QualifiedName])*
	(AsLabel sourceName = ID)? 
;

EventSourceType:
	System | MonitoringRule
;

// FIXME: make proper window declaration!
WindowDeclaration:
	WindowLabel expression = WindowExpression
;

WindowExpression:
	BatchWindow | TimeWindow
;

BatchWindow:
	value=INT EventLabel?
;

TimeWindow:
	value=INT unit=TimeUnit
;

enum TimeUnit:
	SECONDS = 's' | SECONDS = 'sec' | SECONDS = 'second' | SECONDS = 'seconds' |
	MINUTES = 'm' | MINUTES = 'min' | MINUTES = 'minute' | MINUTES = 'minutes' |
	HOURS = 'h' | HOURS = 'hour' | HOURS = 'hours' |
	DAYS = 'd' | DAYS = 'day' | DAYS = 'days' |
	MONTHS = 'M' | MONTHS = 'month' | MONTHS = 'months' |
	YEARS = 'y' | YEARS = 'year' | YEARS = 'years'
;

MonitoringConditionDeclaration:
	WhereLabel expression = ConditionalExpression
;

FactRule:
	FactRuleLabel name = ID '{'
		(
			sources += EventSourceDeclaration |
			assignments += AttributeAssignment
		)*
	'}'
;

AttributeAssignment:
	SetLabel name=ID value=ConditionalExpression
;

/* Expression syntax adapted from 
 * http://openjdk.java.net/projects/compiler-grammar/antlrworks/Java.g
 * and the Xbase XExpression 	
 */
ConditionalExpression:
	ConditionalOrExpression
;

ConditionalOrExpression returns ConditionalExpression:
	ConditionalAndExpression (=>({BinaryExpression.leftOperand=current} 
		operator=OrOperator) rightOperand=ConditionalAndExpression
	)*
;

OrOperator:
	{OrOperator} ('||' | 'or' | 'OR')
;

ConditionalAndExpression returns ConditionalExpression:
	EqualityExpression (=>({BinaryExpression.leftOperand=current} 
		operator=AndOperator) rightOperand=EqualityExpression)*
;

AndOperator:
	{AndOperator} ('&&' | 'and' | 'AND')
;

EqualityExpression returns ConditionalExpression:
	RelationalExpression (=>({BinaryExpression.leftOperand=current}
		operator=EqualityOperator) rightOperand=RelationalExpression
	)*
;

EqualityOperator:
	{EqualityOperator} ('=' | '!=')
;

RelationalExpression returns ConditionalExpression:
	AdditiveExpression (=>({BinaryExpression.leftOperand=current}
		operator=CompareOperator) rightOperand=AdditiveExpression
	)*
;

CompareOperator:
	{CompareOperator} ('<' | '<=' | '>=' | '>')
;

AdditiveExpression returns ConditionalExpression:
	MultiplicativeExpression (=>({BinaryExpression.leftOperand=current}
		operator=AdditiveOperator) 
		rightOperand=MultiplicativeExpression
	)*
;

AdditiveOperator:
	{AdditiveOperator} ('+' | '-')
;

MultiplicativeExpression returns ConditionalExpression:
	UnaryExpression (=>({BinaryExpression.leftOperand=current}
		operator=MultiplicativeOperator)
		rightOperand=UnaryExpression
	)*
;

MultiplicativeOperator:
	{MultiplicativeOperator} ('*' | '/' | '%')
;

UnaryExpression returns ConditionalExpression:
	{UnaryExpression} operator=UnaryOperatorLiteral 
		operand=PrimaryExpression 
	| PrimaryExpression
;

UnaryOperatorLiteral:
	'-' | 'not' | '!'
;

UnaryOperator returns Operator:
	operator=UnaryOperatorLiteral
;

Operator returns Operator:
	AndOperator | OrOperator | CompareOperator | AdditiveOperator |
	MultiplicativeOperator
;

PrimaryExpression returns ConditionalExpression:
	ParenthesizedExpression |
	Literal |
	FeatureCall
;

ParenthesizedExpression returns ConditionalExpression:
	'(' ConditionalExpression ')'
;

FeatureCall:
	{FeatureCall} attribute=[EventAttribute | QualifiedName]
;

Literal returns ConditionalExpression:
	BooleanLiteral |
	NumberLiteral |
	NullLiteral |
	StringLiteral 
;

BooleanLiteral returns ConditionalExpression:
	{BooleanLiteral} ('false' | isTrue ?= 'true')
;

NumberLiteral returns ConditionalExpression:
	{NumberLiteral} value=Number	
;


NullLiteral returns ConditionalExpression:
	{NullLiteral} 'null'
;


StringLiteral returns ConditionalExpression:
	{StringLiteral} value=STRING
;

//QualifiedName:
//	ID ('.' ID)*
//;

QualifiedNameWithWildcard:
	QualifiedName '.*'?	
;

SystemLabel:
	'system' | 'SYSTEM'
;

MonitoringRuleLabel:
	'monitoringrule' | 'MONITORINGRULE' | 
	'monitor' | 'MONITOR'
;

EmitLabel:
	'emit' | 'EMIT'
;

FromLabel:
	'from' | 'FROM'
;

SourceLabel:
	'source' | 'sources' |
	'SOURCE' | 'SOURCES'
;

ActionLabel:
	'action' | 'ACTION'
;

EventLabel:
	'event' | 'events' |
	'EVENT' | 'EVENTS'
;

AsLabel:
	'as' | 'AS'
;

WhereLabel:
	'where' | 'WHERE'
;

WindowLabel:
	'window' | 'WINDOW'
;

FactRuleLabel:
	'factrule' | 'FACTRULE'
;

SetLabel:
	'set' | 'SET'
;
